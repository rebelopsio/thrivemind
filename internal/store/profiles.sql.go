// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: profiles.sql

package store

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
	"github.com/jackc/pgtype"
)

const createUserProfile = `-- name: CreateUserProfile :one
INSERT INTO user_profiles (
    user_id,
    height_cm,
    weight_kg,
    goal,
    tracking_preference,
    daily_calorie_target
) VALUES (
             $1, $2, $3, $4, $5, $6
         ) RETURNING user_id, height_cm, weight_kg, goal, tracking_preference, daily_calorie_target, created_at, updated_at
`

type CreateUserProfileParams struct {
	UserID             uuid.UUID      `json:"user_id"`
	HeightCm           sql.NullInt32  `json:"height_cm"`
	WeightKg           pgtype.Numeric `json:"weight_kg"`
	Goal               sql.NullString `json:"goal"`
	TrackingPreference sql.NullString `json:"tracking_preference"`
	DailyCalorieTarget sql.NullInt32  `json:"daily_calorie_target"`
}

func (q *Queries) CreateUserProfile(ctx context.Context, arg CreateUserProfileParams) (UserProfile, error) {
	row := q.db.QueryRow(ctx, createUserProfile,
		arg.UserID,
		arg.HeightCm,
		arg.WeightKg,
		arg.Goal,
		arg.TrackingPreference,
		arg.DailyCalorieTarget,
	)
	var i UserProfile
	err := row.Scan(
		&i.UserID,
		&i.HeightCm,
		&i.WeightKg,
		&i.Goal,
		&i.TrackingPreference,
		&i.DailyCalorieTarget,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserProfile = `-- name: GetUserProfile :one
SELECT user_id, height_cm, weight_kg, goal, tracking_preference, daily_calorie_target, created_at, updated_at FROM user_profiles
WHERE user_id = $1
`

func (q *Queries) GetUserProfile(ctx context.Context, userID uuid.UUID) (UserProfile, error) {
	row := q.db.QueryRow(ctx, getUserProfile, userID)
	var i UserProfile
	err := row.Scan(
		&i.UserID,
		&i.HeightCm,
		&i.WeightKg,
		&i.Goal,
		&i.TrackingPreference,
		&i.DailyCalorieTarget,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateUserProfile = `-- name: UpdateUserProfile :one
UPDATE user_profiles SET
                         height_cm = COALESCE($2, height_cm),
                         weight_kg = COALESCE($3, weight_kg),
                         goal = COALESCE($4, goal),
                         tracking_preference = COALESCE($5, tracking_preference),
                         daily_calorie_target = COALESCE($6, daily_calorie_target),
                         updated_at = NOW()
WHERE user_id = $1
    RETURNING user_id, height_cm, weight_kg, goal, tracking_preference, daily_calorie_target, created_at, updated_at
`

type UpdateUserProfileParams struct {
	UserID             uuid.UUID      `json:"user_id"`
	HeightCm           sql.NullInt32  `json:"height_cm"`
	WeightKg           pgtype.Numeric `json:"weight_kg"`
	Goal               sql.NullString `json:"goal"`
	TrackingPreference sql.NullString `json:"tracking_preference"`
	DailyCalorieTarget sql.NullInt32  `json:"daily_calorie_target"`
}

func (q *Queries) UpdateUserProfile(ctx context.Context, arg UpdateUserProfileParams) (UserProfile, error) {
	row := q.db.QueryRow(ctx, updateUserProfile,
		arg.UserID,
		arg.HeightCm,
		arg.WeightKg,
		arg.Goal,
		arg.TrackingPreference,
		arg.DailyCalorieTarget,
	)
	var i UserProfile
	err := row.Scan(
		&i.UserID,
		&i.HeightCm,
		&i.WeightKg,
		&i.Goal,
		&i.TrackingPreference,
		&i.DailyCalorieTarget,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
